Проект состоит из трех заголовочных файлов, иерархически включающих друг друга, и одного .cpp-файла с main'ом.

ScheduledExecutor.h - файл с целевым классом, реализующим заданный интерфейс. Задачи выполняются пулом потоков, за исключением LazyTask - те исполняются с помощью std::async с политикой deferred. Для каждой задачи при добавлении в очередь высчитывается время запуска, исходя из текущего времени и параметра delay, далее, если задача периодическая, при каждой отправке задачи на выполнение в пул задача повторно возвращается в очередь с модифицированным временем запуска.

thread_pool.h - файл класса пула потоков, принимающий задачи и выполняющий их по мере освобождения потоков. Задачи пула "одноразовые", за периодичность отвечает планировщик, отправляющий задачи в пул столько раз, сколько требуется. При отсутствии задач потоки засыпают на условной переменной до получения очередной задачи или команды на остановку.

threadsafe_queue.h - класс потокобезопасной очереди, использующейся пулом потоков для хранения задач.

Сборка проводится набором команд
~$ cmake
~$ make
~$ ./ScheduledExecutor

При компиляции с помощью g++ при запуске возможна ошибка 

terminate called after throwing an instance of 'std::system_error'
  what():  Operation not permitted
Aborted (core dumped)

Это баг g++ (https://bugs.launchpad.net/ubuntu/+source/gcc-defaults/+bug/1228201), лечится добавлением флага -pthread, но это нарушает условие независимости от сторонних библиотек.